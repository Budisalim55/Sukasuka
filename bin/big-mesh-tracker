var big = require('../big');

//
// Use the node resource and store nodes to the big-0 couch
//
big.use('node', {
  "datasource": {
    "type": "couch",
    "host": "big-0.iriscouch.com",
    "port": 80,
    "username": "admin",
    "password": "superpassword"
  }
});

//
// Use the mesh resource for interacting with big mesh
//
big.use('mesh');

//
// Use the http resource for serving basic tracker information on a web page
//
big.use('http');

//
// On every event emitted, update the event count
//
big.onAny(function(){ 
  big.node.get('root', function(err, node){
    big.node.create({ 
      id: 'root',
      events: node.events + 1,
      lastSeen: new Date().toString()
    });
  })
});

//
// On every incoming mesh connection, store the node information in the database,
// and update the last seen date / time
//
big.on('mesh::incoming::connection', function(id){
  big.node.create({ id: id, lastSeen: new Date().toString() }, function(err, node){});
});

//
// On every node::ohai event, store the information reported from the connected node
//
big.on('node::ohai', function(data){
  data.lastSeen = new Date().toString();
  big.node.create(data, function(err, node){});
});


big.listen();

big.start(function(err, server){
  if(err) {
    console.log(err);
  }
  big.node.create({
    id: 'root',
    lastSeen: new Date().toString(),
    events: 0
  }, function(err, result){
    console.log('done', err, result.id);
  });

  console.log('started on ', server.address());
});

//
// Setup some simple routes for serving tracker information
//
big.http.app.get('/info', function(req, res){
  big.node.get('root', function(err, root){
    big.node.all(function(err, nodes){
      res.end(JSON.stringify({
        nodes: nodes.length,
        connections: big.mesh.server.clientsCount,
        events: root
      }, true, 2));
    })
  })
});

big.http.app.get('/nodes', function(req, res){
  big.node.all(function(err, nodes){
    res.end(JSON.stringify(nodes, true, 2));
  })
});
